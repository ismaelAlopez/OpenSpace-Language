local sun = asset.require("scene/solarsystem/sun/transforms")
local sunTransforms = asset.require("scene/solarsystem/sun/transforms")
local transforms = asset.require("./67p")
local kernels = asset.require("./kernels")
local coreKernels = asset.require("spice/core")


local models = asset.resource({
  Name = "Modelos de Rosetta",
  Type = "HttpSynchronization",
  Identifier = "rosetta_model",
  Version = 5
})

local RotationMatrix = {
  0, 1, 0, 0,
  0, 0, 1, 0,
  1, 0, 0, 0,
  0, 0, 0, 1
}

local RosettaPosition = {
  Identifier = "RosettaPosition",
  Parent = sunTransforms.SolarSystemBarycenter.Identifier,
  Transform = {
    Translation = {
      Type = "SpiceTranslation",
      Target = kernels.ID.Rosetta,
      Observer = coreKernels.ID.SolarSystemBarycenter
    },
    Rotation = {
      Type = "SpiceRotation",
      SourceFrame = kernels.Frame.Rosetta,
      DestinationFrame = coreKernels.Frame.Galactic
    }
  },
  GUI = {
    Name = "Posición de Rosetta",
    Path = "/Sistema Solar/Misiones/Rosetta",
    Hidden = true
  }
}

local Rosetta = {
  Identifier = "Rosetta",
  Parent = RosettaPosition.Identifier,
  Transform = {
    Rotation = {
      Type = "StaticRotation",
      Rotation = { 0.0, math.pi / 2.0, 0.0 }
    }
  },
  Renderable = {
    Type = "RenderableModel",
    GeometryFile = models .. "rosetta.glb",
    ModelTransform = RotationMatrix,
    LightSources = {
      sun.LightSource,
      {
        Identifier = "Camera",
        Type = "CameraLightSource",
        Intensity = 0.5
      }
    }
  },
  GUI = {
    Name = "Rosetta",
    Path = "/Sistema Solar/Misiones/Rosetta"
  }
}

local PhilaePosition = {
  Identifier = "PhilaePosition",
  Parent = transforms.Barycenter.Identifier,
  Transform = {
    Translation = {
      Type = "SpiceTranslation",
      Target = kernels.ID.Philae,
      Observer = kernels.ID.ChurymovGerasimenko
    },
    Rotation = {
      Type = "SpiceRotation",
      SourceFrame = kernels.Frame.Rosetta,
      DestinationFrame = coreKernels.Frame.Galactic
    }
  },
  GUI = {
    Name = "Posición de Philae",
    Path = "/Sistema Solar/Misiones/Rosetta",
    Hidden = true
  }
}

local Philae = {
  Identifier = "Philae",
  Parent = PhilaePosition.Identifier,
  Transform = {
    Rotation = {
      Type = "StaticRotation",
      Rotation = { 0.0, math.pi / 2.0, 0.0 }
    }
  },
  Renderable = {
    Type = "RenderableModel",
    GeometryFile = models .. "lander.glb",
    ModelTransform = RotationMatrix,
    LightSources = {
      sun.LightSource,
      {
        Identifier = "Camera",
        Type = "CameraLightSource",
        Intensity = 0.5
      }
    }
  },
  GUI = {
    Name = "Philae",
    Path = "/Sistema Solar/Misiones/Rosetta"
  }
}

local NavCam = {
  Identifier = "NAVCAM",
  Parent = RosettaPosition.Identifier,
  GUI = {
    Path = "/Sistema Solar/Misiones/Rosetta/Instrumentos"
  }
}

local NavCamFov = {
  Identifier = "NAVCAM_FOV",
  Parent = NavCam.Identifier,
  Renderable = {
    Type = "RenderableFov",
    Body = kernels.ID.Rosetta,
    Frame = kernels.Frame.NavCam,
    RGB = { 0.8, 0.7, 0.7 },
    Instrument = {
      Name = kernels.Frame.NavCam,
      Method = "ELLIPSOID",
      Aberration = "NONE"
    },
    PotentialTargets = { "CHURYUMOV-GERASIMENKO" },
    FrameConversions = {
      ["CHURYUMOV-GERASIMENKO"] = "67P/C-G_CK"
    }
  },
  GUI = {
    Name = "Campo de visión de NAVCAM",
    Path = "/Sistema Solar/Misiones/Rosetta/Instrumentos"
  }
}

local ImagePlane = {
  Identifier = "ImagePlaneRosetta",
  Parent = transforms.Comet67P.Identifier,
  Renderable = {
    Type = "RenderablePlaneProjection",
    Frame = kernels.Frame.ChurymovGerasimenko,
    DefaultTarget = "CHURYUMOV-GERASIMENKO",
    Spacecraft = kernels.ID.Rosetta,
    Instrument = kernels.Frame.NavCam,
    Moving = false,
    Texture = models .. "defaultProj.png"
  },
  GUI = {
    Name = "Plano de imagen de Rosetta",
    Path = "/Sistema Solar/Misiones/Rosetta"
  }
}

local RosettaCometTrail = {
  Identifier = "RosettaCometTrail",
  Parent = transforms.Barycenter.Identifier,
  Renderable = {
    Type = "RenderableTrailTrajectory",
    Translation = {
      Type = "SpiceTranslation",
      Target = kernels.ID.Rosetta,
      Observer = kernels.ID.ChurymovGerasimenko
    },
    Color = { 0.288, 0.375, 0.934 },
    StartTime = "2014 AUG 01 12:00:00",
    EndTime = "2016 SEP 30 12:00:00",
    SampleInterval = 3600
  },
  GUI = {
    Name = "Rastro del cometa de Rosetta",
    Path = "/Sistema Solar/Misiones/Rosetta"
  }
}

local PhilaeTrail = {
  Identifier = "PhilaeTrail",
  Parent = transforms.Barycenter.Identifier,
  Renderable = {
    Type = "RenderableTrailTrajectory",
    Translation = {
      Type = "SpiceTranslation",
      Target = kernels.ID.Philae,
      Observer = kernels.ID.ChurymovGerasimenko
    },
    Color = { 0.8, 0.5, 1.0 },
    StartTime = "2014 NOV 12 08:35:00",
    EndTime = "2014 NOV 12 17:00:00",
    SampleInterval = 2
  },
  GUI = {
    Name = "Rastro de Philae",
    Path = "/Sistema Solar/Misiones/Rosetta"
  }
}

local FocusRosetta = {
  Identifier = "os.rosetta.FocusRosetta",
  Name = "Enfocar en Rosetta",
  Command = [[
    openspace.setPropertyValue("NavigationHandler.OrbitalNavigator.Anchor", "Rosetta")
    openspace.setPropertyValue("NavigationHandler.OrbitalNavigator.Aim", "")
    openspace.setPropertyValue("NavigationHandler.OrbitalNavigator.RetargetAnchor", nil)
  ]],
  Documentation = "Establece el enfoque de la cámara en Rosetta",
  GuiPath = "/Misiones/Rosetta",
  IsLocal = false
}

local SetupLanderRelease = {
  Identifier = "os.rosetta.SetupLanderRelease",
  Name = "Configurar tiempo de liberación del módulo",
  Command = [[
    openspace.time.setTime("2014-11-12T08:20:00.00")
  ]],
  Documentation = "Salta al momento en que se libera el módulo Philae",
  GuiPath = "/Misiones/Rosetta",
  IsLocal = false
}

local ToggleImagePlane = {
  Identifier = "os.rosetta.ToggleImagePlane",
  Name = "Alternar plano de imagen",
  Command = [[
    openspace.setPropertyValueSingle(
      "Scene.ImagePlaneRosetta.Renderable.Enabled",
      not openspace.propertyValue("Scene.ImagePlaneRosetta.Renderable.Enabled")
    )
  ]],
  Documentation = "Alterna la visibilidad del plano de imagen flotante",
  GuiPath = "/Misiones/Rosetta",
  IsLocal = false
}

local TogglePhilaeTrail = {
  Identifier = "os.rosetta.TogglePhilaeTrail",
  Name = "Alternar Rastro de Philae",
  Command = [[
    openspace.setPropertyValueSingle(
      "Scene.PhilaeTrail.Renderable.Enabled",
      not openspace.propertyValue("Scene.PhilaeTrail.Renderable.Enabled")
    )
  ]],
  Documentation = "Alterna la visibilidad del rastro de Philae",
  GuiPath = "/Misiones/Rosetta",
  IsLocal = false
}


asset.onInitialize(function()
  openspace.addSceneGraphNode(RosettaPosition)
  openspace.addSceneGraphNode(Rosetta)
  openspace.addSceneGraphNode(PhilaePosition)
  openspace.addSceneGraphNode(Philae)
  openspace.addSceneGraphNode(NavCam)
  openspace.addSceneGraphNode(NavCamFov)
  openspace.addSceneGraphNode(ImagePlane)
  openspace.addSceneGraphNode(RosettaCometTrail)
  openspace.addSceneGraphNode(PhilaeTrail)

  openspace.action.registerAction(FocusRosetta)
  openspace.action.registerAction(SetupLanderRelease)
  openspace.action.registerAction(ToggleImagePlane)
  openspace.action.registerAction(TogglePhilaeTrail)
end)

asset.onDeinitialize(function()
  openspace.action.removeAction(TogglePhilaeTrail)
  openspace.action.removeAction(ToggleImagePlane)
  openspace.action.removeAction(SetupLanderRelease)
  openspace.action.removeAction(FocusRosetta)

  openspace.removeSceneGraphNode(PhilaeTrail)
  openspace.removeSceneGraphNode(RosettaCometTrail)
  openspace.removeSceneGraphNode(ImagePlane)
  openspace.removeSceneGraphNode(NavCamFov)
  openspace.removeSceneGraphNode(NavCam)
  openspace.removeSceneGraphNode(Philae)
  openspace.removeSceneGraphNode(PhilaePosition)
  openspace.removeSceneGraphNode(Rosetta)
  openspace.removeSceneGraphNode(RosettaPosition)
end)

asset.export(RosettaPosition)
asset.export(Rosetta)
asset.export(PhilaePosition)
asset.export(Philae)
asset.export(NavCam)
asset.export(NavCamFov)
asset.export(ImagePlane)
asset.export(RosettaCometTrail)
asset.export("FocusRosetta", FocusRosetta.Identifier)
asset.export("SetupLanderRelease", SetupLanderRelease.Identifier)
asset.export("ToggleImagePlane", ToggleImagePlane.Identifier)
asset.export("TogglePhilaeTrail", TogglePhilaeTrail.Identifier)
